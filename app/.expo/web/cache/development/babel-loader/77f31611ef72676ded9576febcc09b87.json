{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Drawer = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _reactNativeModal = _interopRequireDefault(require(\"react-native-modal\"));\n\nvar _drawer = require(\"./drawer.style\");\n\nvar _theme = require(\"../../theme\");\n\nvar _theme2 = require(\"../../theme/theme.service\");\n\nvar _jsxFileName = \"/Users/pawankumar/Sites/react-native-magnus/src/ui/drawer/drawer.component.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar SCREEN_WIDTH = _reactNative.Dimensions.get('window').width;\n\nvar Drawer = React.forwardRef(function (props, ref) {\n  var direction = props.direction,\n      drawerPercentage = props.drawerPercentage,\n      animationTime = props.animationTime,\n      children = props.children;\n\n  var _useContext = (0, React.useContext)(_theme.ThemeContext),\n      theme = _useContext.theme;\n\n  var computedStyle = (0, _drawer.getStyle)(theme, props);\n\n  var _useState = (0, React.useState)(false),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      isVisible = _useState2[0],\n      setIsVisible = _useState2[1];\n\n  var DRAWER_WIDTH;\n\n  if (drawerPercentage) {\n    DRAWER_WIDTH = SCREEN_WIDTH * (drawerPercentage / 100);\n  }\n\n  (0, React.useImperativeHandle)(ref, function () {\n    return {\n      open: function open() {\n        setIsVisible(true);\n      },\n      close: function close() {\n        setIsVisible(false);\n      }\n    };\n  });\n  return React.createElement(_reactNativeModal.default, {\n    isVisible: isVisible,\n    onSwipeComplete: function onSwipeComplete() {\n      return setIsVisible(false);\n    },\n    swipeDirection: direction === 'left' ? 'left' : 'right',\n    backdropColor: (0, _theme2.getThemeProperty)(theme.colors, props.backdropColor),\n    backdropTransitionOutTiming: 0,\n    animationInTiming: animationTime,\n    animationOutTiming: animationTime,\n    animationIn: direction === 'left' ? 'slideInLeft' : 'slideInRight',\n    animationOut: direction === 'left' ? 'slideOutLeft' : 'slideOutRight',\n    onBackdropPress: function onBackdropPress() {\n      return setIsVisible(false);\n    },\n    style: computedStyle.drawer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNative.SafeAreaView, {\n    style: _objectSpread(_objectSpread({}, computedStyle.container), {}, {\n      width: DRAWER_WIDTH\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, children));\n});\nexports.Drawer = Drawer;\nDrawer.defaultProps = {\n  drawerPercentage: 70,\n  animationTime: 300,\n  bg: 'white',\n  backdropColor: 'black',\n  direction: 'left',\n  rounded: 'none'\n};","map":{"version":3,"sources":["drawer.component.tsx"],"names":["SCREEN_WIDTH","Dimensions","Drawer","React","direction","drawerPercentage","animationTime","children","props","theme","ThemeContext","computedStyle","isVisible","setIsVisible","DRAWER_WIDTH","open","close","width","bg","backdropColor","rounded"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useContext, useState, useImperativeHandle } from 'react';\nimport { Dimensions, SafeAreaView } from 'react-native';\nimport Modal from 'react-native-modal';\n\nimport { getStyle } from './drawer.style';\nimport { ThemeContext } from '../../theme';\nimport { DrawerProps } from './drawer.type';\nimport { getThemeProperty } from '../../theme/theme.service';\n\nexport interface DrawerRef {\n  close: any;\n  open: any;\n}\n\nconst SCREEN_WIDTH = Dimensions.get('window').width;\n\nconst Drawer = React.forwardRef<DrawerRef, DrawerProps>((props, ref) => {\n  const { direction, drawerPercentage, animationTime, children } = props;\n  const { theme } = useContext(ThemeContext);\n  const computedStyle = getStyle(theme, props);\n  const [isVisible, setIsVisible] = useState(false);\n  let DRAWER_WIDTH;\n\n  if (drawerPercentage) {\n    DRAWER_WIDTH = SCREEN_WIDTH * (drawerPercentage / 100);\n  }\n\n  /**\n   * exposing functions to parent\n   */\n  useImperativeHandle(ref, () => ({\n    open() {\n      setIsVisible(true);\n    },\n    close() {\n      setIsVisible(false);\n    },\n  }));\n\n  return (\n    <Modal\n      isVisible={isVisible}\n      onSwipeComplete={() => setIsVisible(false)}\n      swipeDirection={direction === 'left' ? 'left' : 'right'}\n      backdropColor={getThemeProperty(theme.colors, props.backdropColor)}\n      backdropTransitionOutTiming={0}\n      animationInTiming={animationTime}\n      animationOutTiming={animationTime}\n      animationIn={direction === 'left' ? 'slideInLeft' : 'slideInRight'}\n      animationOut={direction === 'left' ? 'slideOutLeft' : 'slideOutRight'}\n      onBackdropPress={() => setIsVisible(false)}\n      style={computedStyle.drawer}\n    >\n      <SafeAreaView\n        style={{\n          ...computedStyle.container,\n          width: DRAWER_WIDTH,\n        }}\n      >\n        {children}\n      </SafeAreaView>\n    </Modal>\n  );\n});\n\nDrawer.defaultProps = {\n  drawerPercentage: 70,\n  animationTime: 300,\n  bg: 'white',\n  backdropColor: 'black',\n  direction: 'left',\n  rounded: 'none',\n};\n\nexport { Drawer };\n"]},"metadata":{},"sourceType":"script"}