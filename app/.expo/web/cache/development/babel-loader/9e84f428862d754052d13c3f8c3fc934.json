{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Textarea = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _input = require(\"./input.style\");\n\nvar _theme = require(\"../../theme\");\n\nvar _jsxFileName = \"/Users/pawankumar/Sites/react-native-magnus/src/ui/input/textarea.component.tsx\";\n\nvar Textarea = function Textarea(props) {\n  var h = props.h,\n      w = props.w,\n      m = props.m,\n      minH = props.minH,\n      minW = props.minW,\n      suffix = props.suffix,\n      prefix = props.prefix,\n      style = props.style,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      children = props.children,\n      borderColor = props.borderColor,\n      borderWidth = props.borderWidth,\n      borderRadius = props.borderRadius,\n      focusBorderColor = props.focusBorderColor,\n      rest = (0, _objectWithoutProperties2.default)(props, [\"h\", \"w\", \"m\", \"minH\", \"minW\", \"suffix\", \"prefix\", \"style\", \"onBlur\", \"onFocus\", \"children\", \"borderColor\", \"borderWidth\", \"borderRadius\", \"focusBorderColor\"]);\n\n  var _useContext = (0, React.useContext)(_theme.ThemeContext),\n      theme = _useContext.theme;\n\n  var _useState = (0, React.useState)(false),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      isFocussed = _useState2[0],\n      setIsFocussed = _useState2[1];\n\n  var computedStyle = (0, _input.getStyle)(theme, props, {\n    isFocussed: isFocussed\n  });\n\n  var onFocusInput = function onFocusInput(e) {\n    setIsFocussed(true);\n\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  var onBlurInput = function onBlurInput(e) {\n    setIsFocussed(false);\n\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  return React.createElement(_reactNative.View, {\n    style: computedStyle.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNative.TextInput, (0, _extends2.default)({\n    multiline: true,\n    textAlignVertical: \"top\",\n    onFocus: function onFocus(e) {\n      return onFocusInput(e);\n    },\n    onBlur: function onBlur(e) {\n      return onBlurInput(e);\n    },\n    style: computedStyle.input\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  })));\n};\n\nexports.Textarea = Textarea;\nTextarea.defaultProps = {\n  minH: 100,\n  p: {\n    x: 12\n  },\n  borderColor: 'gray500',\n  borderWidth: 1\n};","map":{"version":3,"sources":["textarea.component.tsx"],"names":["Textarea","h","w","m","minH","minW","suffix","prefix","style","onBlur","onFocus","children","borderColor","borderWidth","borderRadius","focusBorderColor","rest","props","theme","ThemeContext","isFocussed","setIsFocussed","computedStyle","onFocusInput","onBlurInput","p","x"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAUA,IAAA,MAAA,GAAA,OAAA,iBAAA;;AACA,IAAA,MAAA,GAAA,OAAA,eAAA;;;;AAiBA,IAAMA,QAAiD,GAAjDA,SAAAA,QAAAA,CAAoD,KAApDA,EAA+D;AAAA,MAEjEC,CAFiE,GAkB/DgB,KAlB+D,CAAA,CAAA;AAAA,MAGjEf,CAHiE,GAkB/De,KAlB+D,CAAA,CAAA;AAAA,MAIjEd,CAJiE,GAkB/Dc,KAlB+D,CAAA,CAAA;AAAA,MAKjEb,IALiE,GAkB/Da,KAlB+D,CAAA,IAAA;AAAA,MAMjEZ,IANiE,GAkB/DY,KAlB+D,CAAA,IAAA;AAAA,MAOjEX,MAPiE,GAkB/DW,KAlB+D,CAAA,MAAA;AAAA,MAQjEV,MARiE,GAkB/DU,KAlB+D,CAAA,MAAA;AAAA,MASjET,KATiE,GAkB/DS,KAlB+D,CAAA,KAAA;AAAA,MAUjER,MAViE,GAkB/DQ,KAlB+D,CAAA,MAAA;AAAA,MAWjEP,OAXiE,GAkB/DO,KAlB+D,CAAA,OAAA;AAAA,MAYjEN,QAZiE,GAkB/DM,KAlB+D,CAAA,QAAA;AAAA,MAajEL,WAbiE,GAkB/DK,KAlB+D,CAAA,WAAA;AAAA,MAcjEJ,WAdiE,GAkB/DI,KAlB+D,CAAA,WAAA;AAAA,MAejEH,YAfiE,GAkB/DG,KAlB+D,CAAA,YAAA;AAAA,MAgBjEF,gBAhBiE,GAkB/DE,KAlB+D,CAAA,gBAAA;AAAA,MAiB9DD,IAjB8D,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,KAAA,EAAA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,aAAA,EAAA,aAAA,EAAA,cAAA,EAAA,kBAAA,CAAA,CAAA;;AAAA,MAAA,WAAA,GAmBjD,CAAA,GAAA,KAAA,CAAA,UAAA,EAAWG,MAAAA,CAnBsC,YAmBjD,CAnBiD;AAAA,MAmB3DD,KAnB2D,GAAA,WAAA,CAAA,KAAA;;AAAA,MAAA,SAAA,GAoB/B,CAAA,GAAA,KAAA,CAAA,QAAA,EApB+B,KAoB/B,CApB+B;AAAA,MAAA,UAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAoB5DE,UApB4D,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAoBhDC,aApBgD,GAAA,UAAA,CAAA,CAAA,CAAA;;AAqBnE,MAAMC,aAAa,GAAG,CAAA,GAAA,MAAA,CAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAuB;AAAEF,IAAAA,UAAU,EAAzD;AAA6C,GAAvB,CAAtB;;AAKA,MAAMG,YAAY,GAAZA,SAAAA,YAAAA,CAAe,CAAfA,EAAqE;AACzEF,IAAAA,aAAa,CAAbA,IAAa,CAAbA;;AAEA,QAAA,OAAA,EAAa;AACXX,MAAAA,OAAO,CAAPA,CAAO,CAAPA;AAEH;AAND,GAAA;;AAYA,MAAMc,WAAW,GAAXA,SAAAA,WAAAA,CAAc,CAAdA,EAAoE;AACxEH,IAAAA,aAAa,CAAbA,KAAa,CAAbA;;AAEA,QAAA,MAAA,EAAY;AACVZ,MAAAA,MAAM,CAANA,CAAM,CAANA;AAEH;AAND,GAAA;;AAQA,SACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAQ,IAAA,KAAK,EAAEa,aAAa,CAA5B,SAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,SAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA;AACE,IAAA,SAAS,EADX,IAAA;AAEE,IAAA,iBAAiB,EAFnB,KAAA;AAGE,IAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAA;AAAA,aAAOC,YAAY,CAAnB,CAAmB,CAAnB;AAHX,KAAA;AAIE,IAAA,MAAM,EAAE,SAAA,MAAA,CAAA,CAAA,EAAA;AAAA,aAAOC,WAAW,CAAlB,CAAkB,CAAlB;AAJV,KAAA;AAKE,IAAA,KAAK,EAAEF,aAAa,CALtB;AAAA,GAAA,EAAA,IAAA,EAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAFJ;AAEI;AAAA,GAAA,CAAA,CADF,CADF;AA9CF,CAAA;;;AA4DAtB,QAAQ,CAARA,YAAAA,GAAwB;AACtBI,EAAAA,IAAI,EADkB,GAAA;AAEtBqB,EAAAA,CAAC,EAAE;AAAEC,IAAAA,CAAC,EAFgB;AAEnB,GAFmB;AAGtBd,EAAAA,WAAW,EAHW,SAAA;AAItBC,EAAAA,WAAW,EAJbb;AAAwB,CAAxBA","sourcesContent":["import * as React from 'react';\nimport { useContext, useState } from 'react';\nimport {\n  View as RNView,\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\n\nimport { getStyle } from './input.style';\nimport { ThemeContext } from '../../theme';\n\ninterface TextInputProps extends RNTextInputProps {\n  h?: number;\n  w?: number;\n  m?: any;\n  p?: any;\n  borderColor?: string;\n  focusBorderColor?: string;\n  borderWidth?: number;\n  borderRadius?: any;\n  minW?: number | string;\n  minH?: number | string;\n  suffix?: React.ReactNode;\n  prefix?: React.ReactNode;\n}\n\nconst Textarea: React.FunctionComponent<TextInputProps> = (props) => {\n  const {\n    h,\n    w,\n    m,\n    minH,\n    minW,\n    suffix,\n    prefix,\n    style,\n    onBlur,\n    onFocus,\n    children,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    focusBorderColor,\n    ...rest\n  } = props;\n  const { theme } = useContext(ThemeContext);\n  const [isFocussed, setIsFocussed] = useState(false);\n  const computedStyle = getStyle(theme, props, { isFocussed });\n\n  /**\n   * on focus input\n   */\n  const onFocusInput = (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n    setIsFocussed(true);\n\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  /**\n   * on blur input\n   * @param e\n   */\n  const onBlurInput = (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n    setIsFocussed(false);\n\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  return (\n    <RNView style={computedStyle.container}>\n      <RNTextInput\n        multiline\n        textAlignVertical=\"top\"\n        onFocus={(e) => onFocusInput(e)}\n        onBlur={(e) => onBlurInput(e)}\n        style={computedStyle.input}\n        {...rest}\n      />\n    </RNView>\n  );\n};\n\nTextarea.defaultProps = {\n  minH: 100,\n  p: { x: 12 },\n  borderColor: 'gray500',\n  borderWidth: 1,\n};\n\nexport { Textarea };\n"]},"metadata":{},"sourceType":"script"}