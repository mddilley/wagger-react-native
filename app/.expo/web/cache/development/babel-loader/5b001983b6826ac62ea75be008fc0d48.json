{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Avatar = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _avatar = require(\"./avatar.style\");\n\nvar _theme = require(\"../../theme\");\n\nvar _jsxFileName = \"/Users/pawankumar/Sites/react-native-magnus/src/ui/avatar/avatar.component.tsx\";\n\nvar Avatar = function Avatar(props) {\n  var bg = props.bg,\n      m = props.m,\n      mt = props.mt,\n      mr = props.mr,\n      mb = props.mb,\n      ml = props.ml,\n      ms = props.ms,\n      p = props.p,\n      pr = props.pr,\n      pt = props.pt,\n      pb = props.pb,\n      pl = props.pl,\n      position = props.position,\n      style = props.style,\n      rounded = props.rounded,\n      roundedTop = props.roundedTop,\n      roundedRight = props.roundedRight,\n      roundedBottom = props.roundedBottom,\n      roundedLeft = props.roundedLeft,\n      children = props.children,\n      borderColor = props.borderColor,\n      color = props.color,\n      fontSize = props.fontSize,\n      size = props.size,\n      alignSelf = props.alignSelf,\n      bottom = props.bottom,\n      left = props.left,\n      right = props.right,\n      top = props.top,\n      borderBottomColor = props.borderBottomColor,\n      borderLeftColor = props.borderLeftColor,\n      borderTopColor = props.borderTopColor,\n      borderRightColor = props.borderRightColor,\n      borderWidth = props.borderWidth,\n      borderLeftWidth = props.borderLeftWidth,\n      borderRightWidth = props.borderRightWidth,\n      borderBottomWidth = props.borderBottomWidth,\n      borderTopWidth = props.borderTopWidth,\n      borderEndWidth = props.borderEndWidth,\n      shadow = props.shadow,\n      shadowColor = props.shadowColor,\n      opacity = props.opacity,\n      zIndex = props.zIndex,\n      source = props.source,\n      rest = (0, _objectWithoutProperties2.default)(props, [\"bg\", \"m\", \"mt\", \"mr\", \"mb\", \"ml\", \"ms\", \"p\", \"pr\", \"pt\", \"pb\", \"pl\", \"position\", \"style\", \"rounded\", \"roundedTop\", \"roundedRight\", \"roundedBottom\", \"roundedLeft\", \"children\", \"borderColor\", \"color\", \"fontSize\", \"size\", \"alignSelf\", \"bottom\", \"left\", \"right\", \"top\", \"borderBottomColor\", \"borderLeftColor\", \"borderTopColor\", \"borderRightColor\", \"borderWidth\", \"borderLeftWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderTopWidth\", \"borderEndWidth\", \"shadow\", \"shadowColor\", \"opacity\", \"zIndex\", \"source\"]);\n\n  var _useContext = (0, React.useContext)(_theme.ThemeContext),\n      theme = _useContext.theme;\n\n  var computedStyle = (0, _avatar.getStyle)(theme, props);\n\n  var renderContent = function renderContent() {\n    if (source) {\n      return React.createElement(_reactNative.Image, {\n        source: source,\n        style: computedStyle.image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 14\n        }\n      });\n    }\n\n    if (typeof children === 'string') {\n      return React.createElement(_reactNative.Text, {\n        style: computedStyle.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 14\n        }\n      }, children);\n    }\n\n    return children;\n  };\n\n  return React.createElement(_reactNative.View, (0, _extends2.default)({\n    style: computedStyle.container\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }), renderContent());\n};\n\nexports.Avatar = Avatar;\nAvatar.defaultProps = {\n  bg: 'transparent',\n  size: 48,\n  color: 'gray500',\n  rounded: 'circle',\n  fontSize: 'md',\n  shadow: 'none',\n  shadowColor: 'gray500',\n  position: 'relative',\n  zIndex: 1\n};","map":{"version":3,"sources":["avatar.component.tsx"],"names":["Avatar","bg","m","mt","mr","mb","ml","ms","p","pr","pt","pb","pl","position","style","rounded","roundedTop","roundedRight","roundedBottom","roundedLeft","children","borderColor","color","fontSize","size","alignSelf","bottom","left","right","top","borderBottomColor","borderLeftColor","borderTopColor","borderRightColor","borderWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","borderTopWidth","borderEndWidth","shadow","shadowColor","opacity","zIndex","source","rest","props","theme","ThemeContext","computedStyle","renderContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useContext } from 'react';\nimport { Text as RNText, View as RNView, Image as RNImage } from 'react-native';\n\nimport { getStyle } from './avatar.style';\nimport { ThemeContext } from '../../theme';\nimport { AvatarProps } from './avatar.type';\n\nconst Avatar: React.FunctionComponent<AvatarProps> = (props) => {\n  const {\n    bg,\n    m,\n    mt,\n    mr,\n    mb,\n    ml,\n    ms,\n    p,\n    pr,\n    pt,\n    pb,\n    pl,\n    position,\n    style,\n    rounded,\n    roundedTop,\n    roundedRight,\n    roundedBottom,\n    roundedLeft,\n    children,\n    borderColor,\n    color,\n    fontSize,\n    size,\n    alignSelf,\n    bottom,\n    left,\n    right,\n    top,\n    borderBottomColor,\n    borderLeftColor,\n    borderTopColor,\n    borderRightColor,\n    borderWidth,\n    borderLeftWidth,\n    borderRightWidth,\n    borderBottomWidth,\n    borderTopWidth,\n    borderEndWidth,\n    shadow,\n    shadowColor,\n    opacity,\n    zIndex,\n    source,\n    ...rest\n  } = props;\n  const { theme } = useContext(ThemeContext);\n  const computedStyle = getStyle(theme, props);\n\n  /**\n   * render the content based on the props passed\n   */\n  const renderContent = () => {\n    if (source) {\n      return <RNImage source={source} style={computedStyle.image} />;\n    }\n\n    if (typeof children === 'string') {\n      return <RNText style={computedStyle.text}>{children}</RNText>;\n    }\n\n    return children;\n  };\n\n  return (\n    <RNView style={computedStyle.container} {...rest}>\n      {renderContent()}\n    </RNView>\n  );\n};\n\nAvatar.defaultProps = {\n  bg: 'transparent',\n  size: 48,\n  color: 'gray500',\n  rounded: 'circle',\n  fontSize: 'md',\n  shadow: 'none',\n  shadowColor: 'gray500',\n  position: 'relative',\n  zIndex: 1,\n};\n\nexport { Avatar };\n"]},"metadata":{},"sourceType":"script"}