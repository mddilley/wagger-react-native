{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStyle = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _theme = require(\"../../theme/theme.service\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar SCREEN_WIDTH = _reactNative.Dimensions.get('window').width;\n\nvar SCREEN_HEIGHT = _reactNative.Dimensions.get('window').height;\n\nvar getStyle = function getStyle(theme, props) {\n  var computedStyle = {};\n  computedStyle.drawer = {\n    margin: 0\n  };\n  computedStyle.container = _objectSpread(_objectSpread(_objectSpread({\n    position: 'absolute',\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n    zIndex: 0,\n    margin: 0,\n    backgroundColor: (0, _theme.getThemeProperty)(theme.colors, props.bg)\n  }, (0, _theme.createBorderWidthStyles)(props)), (0, _theme.createBorderColorStyles)(props, theme.colors)), (0, _theme.createBorderRadiusStyles)(props, theme.borderRadius));\n\n  if (props.direction === 'right') {\n    computedStyle.container = _objectSpread(_objectSpread({}, computedStyle.container), {}, {\n      right: 0\n    });\n  } else {\n    computedStyle.container = _objectSpread(_objectSpread({}, computedStyle.container), {}, {\n      left: 0\n    });\n  }\n\n  return _reactNative.StyleSheet.create(computedStyle);\n};\n\nexports.getStyle = getStyle;","map":{"version":3,"sources":["drawer.style.tsx"],"names":["SCREEN_WIDTH","Dimensions","SCREEN_HEIGHT","getStyle","computedStyle","margin","position","width","height","zIndex","backgroundColor","theme","props","right","left","StyleSheet"],"mappings":";;;;;;;sDAAA,uC;;;;AAEA,IAAA,MAAA,GAAA,OAAA,6BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;AAAA,IAAMA,YAAY,GAAGC,YAAAA,CAAAA,UAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAArB,KAAA;;AACA,IAAMC,aAAa,GAAGD,YAAAA,CAAAA,UAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAtB,MAAA;;AAQO,IAAME,QAAQ,GAARA,SAAAA,QAAAA,CAAW,KAAXA,EAAW,KAAXA,EAAuC;AAClD,MAAMC,aAAkB,GAAxB,EAAA;AAEAA,EAAAA,aAAa,CAAbA,MAAAA,GAAuB;AACrBC,IAAAA,MAAM,EADRD;AAAuB,GAAvBA;AAIAA,EAAAA,aAAa,CAAbA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA;AACEE,IAAAA,QAAQ,EADVF,UAAAA;AAEEG,IAAAA,KAAK,EAFPH,YAAAA;AAGEI,IAAAA,MAAM,EAHRJ,aAAAA;AAIEK,IAAAA,MAAM,EAJRL,CAAAA;AAKEC,IAAAA,MAAM,EALRD,CAAAA;AAMEM,IAAAA,eAAe,EAAE,CAAA,GAAA,MAAA,CAAA,gBAAA,EAAiBC,KAAK,CAAtB,MAAA,EAA+BC,KAAK,CANvDR,EAMmB;AANnBA,GAAAA,EAOK,CAAA,GAAA,MAAA,CAAA,uBAAA,EAPLA,KAOK,CAPLA,CAAAA,EAQK,CAAA,GAAA,MAAA,CAAA,uBAAA,EAAA,KAAA,EAA+BO,KAAK,CARzCP,MAQK,CARLA,CAAAA,EASK,CAAA,GAAA,MAAA,CAAA,wBAAA,EAAA,KAAA,EAAgCO,KAAK,CAT1CP,YASK,CATLA,CAAAA;;AAYA,MAAIQ,KAAK,CAALA,SAAAA,KAAJ,OAAA,EAAiC;AAC/BR,IAAAA,aAAa,CAAbA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEES,MAAAA,KAAK,EAFPT;AAAAA,KAAAA,CAAAA;AADF,GAAA,MAKO;AACLA,IAAAA,aAAa,CAAbA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEEU,MAAAA,IAAI,EAFNV;AAAAA,KAAAA,CAAAA;AAMF;;AAAA,SAAOW,YAAAA,CAAAA,UAAAA,CAAAA,MAAAA,CAAP,aAAOA,CAAP;AA/BK,CAAA","sourcesContent":["import { StyleSheet, Dimensions } from 'react-native';\n\nimport {\n  getThemeProperty,\n  createBorderColorStyles,\n  createBorderWidthStyles,\n  createBorderRadiusStyles,\n} from '../../theme/theme.service';\n\nconst SCREEN_WIDTH = Dimensions.get('window').width;\nconst SCREEN_HEIGHT = Dimensions.get('window').height;\n\n/**\n * computed style\n *\n * @param theme\n * @param props\n */\nexport const getStyle = (theme: any, props: any) => {\n  const computedStyle: any = {};\n\n  computedStyle.drawer = {\n    margin: 0,\n  };\n\n  computedStyle.container = {\n    position: 'absolute',\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n    zIndex: 0,\n    margin: 0,\n    backgroundColor: getThemeProperty(theme.colors, props.bg),\n    ...createBorderWidthStyles(props),\n    ...createBorderColorStyles(props, theme.colors),\n    ...createBorderRadiusStyles(props, theme.borderRadius),\n  };\n\n  if (props.direction === 'right') {\n    computedStyle.container = {\n      ...computedStyle.container,\n      right: 0,\n    };\n  } else {\n    computedStyle.container = {\n      ...computedStyle.container,\n      left: 0,\n    };\n  }\n\n  return StyleSheet.create(computedStyle);\n};\n"]},"metadata":{},"sourceType":"script"}