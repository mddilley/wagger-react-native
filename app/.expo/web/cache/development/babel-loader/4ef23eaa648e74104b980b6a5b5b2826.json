{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/michaeldilley/Wagger/app/components/NavFab.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Button, Fab, Icon, Text } from \"react-native-magnus\";\nimport { colors } from \"../styles/colors\";\nimport { routesConfig } from \"../nav/config\";\nimport { handleNavPress } from \"../nav/navHandlers\";\nvar appHeaderStyles = {\n  iconSize: \"2xl\"\n};\n\nvar NavFab = function NavFab() {\n  var fabRouteConfigs = Object.entries(routesConfig).reduce(function (acc, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        config = _ref2[1];\n\n    return config.isFab ? _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, config)) : acc;\n  }, {});\n  return React.createElement(Fab, {\n    icon: React.createElement(Icon, {\n      fontFamily: \"Feather\",\n      name: \"menu\",\n      fontSize: appHeaderStyles.iconSize,\n      color: \"white\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }\n    }),\n    bg: colors.main,\n    h: 50,\n    w: 50,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, Object.entries(fabRouteConfigs).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        config = _ref4[1];\n\n    return React.createElement(Button, {\n      key: key,\n      mt: \"lg\",\n      py: \"lg\",\n      bg: colors.main,\n      color: \"white\",\n      prefix: config.icon && React.createElement(Icon, {\n        name: config.icon,\n        fontFamily: config.iconFontFamily,\n        fontSize: appHeaderStyles.iconSize,\n        color: \"white\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }\n      }),\n      suffix: React.createElement(Icon, {\n        name: \"arrowright\",\n        ml: \"md\",\n        fontSize: appHeaderStyles.iconSize,\n        color: \"white\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }\n      }),\n      onPress: function onPress() {\n        return handleNavPress(key);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      fontSize: \"xl\",\n      color: \"white\",\n      fontWeight: \"bold\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, \"  \", config.navText));\n  }));\n};\n\nexport default NavFab;","map":{"version":3,"sources":["/Users/michaeldilley/Wagger/app/components/NavFab.js"],"names":["React","Button","Fab","Icon","Text","colors","routesConfig","handleNavPress","appHeaderStyles","iconSize","NavFab","fabRouteConfigs","Object","entries","reduce","acc","key","config","isFab","main","map","icon","iconFontFamily","navText"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,IAAtB,EAA4BC,IAA5B,QAAwC,qBAAxC;AACA,SAASC,MAAT;AACA,SAASC,YAAT;AACA,SAASC,cAAT;AAEA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,QAAQ,EAAE;AADY,CAAxB;;AAIA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,MAAMC,eAAe,GAAGC,MAAM,CAACC,OAAP,CAAeP,YAAf,EAA6BQ,MAA7B,CACtB,UAACC,GAAD;AAAA;AAAA,QAAOC,GAAP;AAAA,QAAYC,MAAZ;;AAAA,WAAyBA,MAAM,CAACC,KAAP,mCAAoBH,GAApB,2BAA0BC,GAA1B,EAAgCC,MAAhC,KAA2CF,GAApE;AAAA,GADsB,EAEtB,EAFsB,CAAxB;AAKA,SACE,oBAAC,GAAD;AACE,IAAA,IAAI,EACF,oBAAC,IAAD;AACE,MAAA,UAAU,EAAC,SADb;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,QAAQ,EAAEP,eAAe,CAACC,QAH5B;AAIE,MAAA,KAAK,EAAC,OAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AASE,IAAA,EAAE,EAAEJ,MAAM,CAACc,IATb;AAUE,IAAA,CAAC,EAAE,EAVL;AAWE,IAAA,CAAC,EAAE,EAXL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGP,MAAM,CAACC,OAAP,CAAeF,eAAf,EAAgCS,GAAhC,CAAoC;AAAA;AAAA,QAAEJ,GAAF;AAAA,QAAOC,MAAP;;AAAA,WACnC,oBAAC,MAAD;AACE,MAAA,GAAG,EAAED,GADP;AAEE,MAAA,EAAE,EAAC,IAFL;AAGE,MAAA,EAAE,EAAC,IAHL;AAIE,MAAA,EAAE,EAAEX,MAAM,CAACc,IAJb;AAKE,MAAA,KAAK,EAAC,OALR;AAME,MAAA,MAAM,EACJF,MAAM,CAACI,IAAP,IACE,oBAAC,IAAD;AACE,QAAA,IAAI,EAAEJ,MAAM,CAACI,IADf;AAEE,QAAA,UAAU,EAAEJ,MAAM,CAACK,cAFrB;AAGE,QAAA,QAAQ,EAAEd,eAAe,CAACC,QAH5B;AAIE,QAAA,KAAK,EAAC,OAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARN;AAgBE,MAAA,MAAM,EACJ,oBAAC,IAAD;AACE,QAAA,IAAI,EAAC,YADP;AAEE,QAAA,EAAE,EAAC,IAFL;AAGE,QAAA,QAAQ,EAAED,eAAe,CAACC,QAH5B;AAIE,QAAA,KAAK,EAAC,OAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjBJ;AAwBE,MAAA,OAAO,EAAE;AAAA,eAAMF,cAAc,CAACS,GAAD,CAApB;AAAA,OAxBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA0BE,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAC,IAAf;AAAoB,MAAA,KAAK,EAAC,OAA1B;AAAkC,MAAA,UAAU,EAAC,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,IADH,EAEGC,MAAM,CAACM,OAFV,CA1BF,CADmC;AAAA,GAApC,CAbH,CADF;AAiDD,CAvDD;;AAyDA,eAAeb,MAAf","sourcesContent":["import React from \"react\";\nimport { Button, Fab, Icon, Text } from \"react-native-magnus\";\nimport { colors } from \"../styles/colors\";\nimport { routesConfig } from \"../nav/config\";\nimport { handleNavPress } from \"../nav/navHandlers\";\n\nconst appHeaderStyles = {\n  iconSize: \"2xl\",\n};\n\nconst NavFab = () => {\n  const fabRouteConfigs = Object.entries(routesConfig).reduce(\n    (acc, [key, config]) => (config.isFab ? { ...acc, [key]: config } : acc),\n    {}\n  );\n\n  return (\n    <Fab\n      icon={\n        <Icon\n          fontFamily=\"Feather\"\n          name=\"menu\"\n          fontSize={appHeaderStyles.iconSize}\n          color=\"white\"\n        />\n      }\n      bg={colors.main}\n      h={50}\n      w={50}\n    >\n      {Object.entries(fabRouteConfigs).map(([key, config]) => (\n        <Button\n          key={key}\n          mt=\"lg\"\n          py=\"lg\"\n          bg={colors.main}\n          color=\"white\"\n          prefix={\n            config.icon && (\n              <Icon\n                name={config.icon}\n                fontFamily={config.iconFontFamily}\n                fontSize={appHeaderStyles.iconSize}\n                color=\"white\"\n              />\n            )\n          }\n          suffix={\n            <Icon\n              name=\"arrowright\"\n              ml=\"md\"\n              fontSize={appHeaderStyles.iconSize}\n              color=\"white\"\n            />\n          }\n          onPress={() => handleNavPress(key)}\n        >\n          <Text fontSize=\"xl\" color=\"white\" fontWeight=\"bold\">\n            {\"  \"}\n            {config.navText}\n          </Text>\n        </Button>\n      ))}\n    </Fab>\n  );\n};\n\nexport default NavFab;\n"]},"metadata":{},"sourceType":"module"}