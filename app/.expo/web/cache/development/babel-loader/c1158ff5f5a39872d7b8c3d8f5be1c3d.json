{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport { Auth, Hub } from \"aws-amplify\";\nexport var useUserSession = function useUserSession() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var getUserEmail = function getUserEmail() {\n    var _user$attributes;\n\n    return user == null ? void 0 : (_user$attributes = user.attributes) == null ? void 0 : _user$attributes.email;\n  };\n\n  var getUserJwt = function getUserJwt() {\n    var _user$signInUserSessi, _user$signInUserSessi2;\n\n    return user == null ? void 0 : (_user$signInUserSessi = user.signInUserSession) == null ? void 0 : (_user$signInUserSessi2 = _user$signInUserSessi.idToken) == null ? void 0 : _user$signInUserSessi2.jwtToken;\n  };\n\n  useEffect(function () {\n    var updateUser = function updateUser(authState) {\n      var _user;\n\n      return _regeneratorRuntime.async(function updateUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 3:\n              _user = _context.sent;\n              setUser(_user);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              setUser(null);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n\n    Hub.listen(\"auth\", updateUser);\n    updateUser();\n    return function () {\n      return Hub.remove(\"auth\", updateUser);\n    };\n  }, []);\n  return {\n    user: user,\n    getUserEmail: getUserEmail,\n    getUserJwt: getUserJwt\n  };\n};","map":{"version":3,"sources":["/Users/michaeldilley/Wagger/app/auth/userSession.js"],"names":["useEffect","useState","Auth","Hub","useUserSession","user","setUser","getUserEmail","attributes","email","getUserJwt","signInUserSession","idToken","jwtToken","updateUser","authState","currentAuthenticatedUser","listen","remove"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,aAA1B;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA,kBACVH,QAAQ,CAAC,IAAD,CADE;AAAA;AAAA,MAC3BI,IAD2B;AAAA,MACrBC,OADqB;;AAGlC,MAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;;AAAA,WAAMF,IAAN,wCAAMA,IAAI,CAAEG,UAAZ,qBAAM,iBAAkBC,KAAxB;AAAA,GAArB;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;;AAAA,WAAML,IAAN,6CAAMA,IAAI,CAAEM,iBAAZ,+CAAM,sBAAyBC,OAA/B,qBAAM,uBAAkCC,QAAxC;AAAA,GAAnB;;AAEAb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIc,UAAU,GAAG,SAAbA,UAAa,CAAOC,SAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEIb,IAAI,CAACc,wBAAL,EAFJ;;AAAA;AAETX,cAAAA,KAFS;AAGbC,cAAAA,OAAO,CAACD,KAAD,CAAP;AAHa;AAAA;;AAAA;AAAA;AAAA;AAKbC,cAAAA,OAAO,CAAC,IAAD,CAAP;;AALa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AASAH,IAAAA,GAAG,CAACc,MAAJ,CAAW,MAAX,EAAmBH,UAAnB;AAEAA,IAAAA,UAAU;AAEV,WAAO;AAAA,aAAMX,GAAG,CAACe,MAAJ,CAAW,MAAX,EAAmBJ,UAAnB,CAAN;AAAA,KAAP;AACD,GAfQ,EAeN,EAfM,CAAT;AAiBA,SAAO;AAAET,IAAAA,IAAI,EAAJA,IAAF;AAAQE,IAAAA,YAAY,EAAZA,YAAR;AAAsBG,IAAAA,UAAU,EAAVA;AAAtB,GAAP;AACD,CAzBM","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Auth, Hub } from \"aws-amplify\";\n\nexport const useUserSession = () => {\n  const [user, setUser] = useState(null);\n\n  const getUserEmail = () => user?.attributes?.email;\n\n  const getUserJwt = () => user?.signInUserSession?.idToken?.jwtToken;\n\n  useEffect(() => {\n    let updateUser = async (authState) => {\n      try {\n        let user = await Auth.currentAuthenticatedUser();\n        setUser(user);\n      } catch {\n        setUser(null);\n      }\n    };\n\n    Hub.listen(\"auth\", updateUser); // Listen for login/signup events\n\n    updateUser(); // Check manually the first time because we won't get a Hub event\n\n    return () => Hub.remove(\"auth\", updateUser); // Cleanup\n  }, []);\n\n  return { user, getUserEmail, getUserJwt };\n};\n"]},"metadata":{},"sourceType":"module"}