{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RadioGroup = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _div = require(\"../div/div.component\");\n\nvar _jsxFileName = \"/Users/pawankumar/Sites/react-native-magnus/src/ui/radio/group.component.tsx\";\n\nvar RadioGroup = function RadioGroup(props) {\n  var _useState = (0, React.useState)(props.value || props.defaultValue || null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var children = props.children,\n      onChangeProp = props.onChange,\n      propsValue = props.value,\n      rest = (0, _objectWithoutProperties2.default)(props, [\"children\", \"onChange\", \"value\"]);\n\n  var onChange = function onChange(optionValue) {\n    if (!('value' in props)) {\n      setValue(optionValue);\n    }\n\n    if (onChangeProp) {\n      onChangeProp(optionValue);\n    }\n  };\n\n  var renderChildren = function renderChildren() {\n    return React.Children.map(children, function (child) {\n      return React.cloneElement(child, {\n        onChange: onChange,\n        checked: value === child.props.value\n      });\n    });\n  };\n\n  return React.createElement(_div.Div, (0, _extends2.default)({}, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }\n  }), renderChildren());\n};\n\nexports.RadioGroup = RadioGroup;","map":{"version":3,"sources":["group.component.tsx"],"names":["RadioGroup","value","setValue","props","children","onChangeProp","propsValue","rest","onChange","renderChildren","React","checked","child"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAGA,IAAA,IAAA,GAAA,OAAA,wBAAA;;;;AAUA,IAAMA,UAAgD,GAAhDA,SAAAA,UAAAA,CAAmD,KAAnDA,EAA8D;AAAA,MAAA,SAAA,GACxC,CAAA,GAAA,KAAA,CAAA,QAAA,EAASG,KAAK,CAALA,KAAAA,IAAeA,KAAK,CAApBA,YAAAA,IAD+B,IACxC,CADwC;AAAA,MAAA,UAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAC3DF,KAD2D,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MACpDC,QADoD,GAAA,UAAA,CAAA,CAAA,CAAA;;AAAA,MAGhEE,QAHgE,GAO9DD,KAP8D,CAAA,QAAA;AAAA,MAItDE,YAJsD,GAO9DF,KAP8D,CAAA,QAAA;AAAA,MAKzDG,UALyD,GAO9DH,KAP8D,CAAA,KAAA;AAAA,MAM7DI,IAN6D,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,KAAA,EAAA,CAAA,UAAA,EAAA,UAAA,EAAA,OAAA,CAAA,CAAA;;AAelE,MAAMC,QAAQ,GAARA,SAAAA,QAAAA,CAAW,WAAXA,EAAiC;AACrC,QAAI,EAAE,WAAN,KAAI,CAAJ,EAAyB;AACvBN,MAAAA,QAAQ,CAARA,WAAQ,CAARA;AAGF;;AAAA,QAAA,YAAA,EAAkB;AAChBG,MAAAA,YAAY,CAAZA,WAAY,CAAZA;AAEH;AARD,GAAA;;AAaA,MAAMI,cAAc,GAAdA,SAAAA,cAAAA,GAAuB;AAC3B,WAAOC,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAA6B,UAAA,KAAA,EAA+B;AACjE,aAAOA,KAAK,CAALA,YAAAA,CAAAA,KAAAA,EAA0B;AAC/BF,QAAAA,QAAQ,EADuB,QAAA;AAE/BG,QAAAA,OAAO,EAAEV,KAAK,KAAKW,KAAK,CAALA,KAAAA,CAFrB;AAAiC,OAA1BF,CAAP;AADF,KAAOA,CAAP;AADF,GAAA;;AASA,SAAO,KAAA,CAAA,aAAA,CAAC,IAAA,CAAD,GAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAAA,EAAgBD,cAAvB,EAAO,CAAP;AArCF,CAAA","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\n\nimport { Div } from '../div/div.component';\nimport { DivProps } from '../div/div.type';\n\ninterface ButtonProps extends DivProps {\n  onChange?: any;\n  value?: any[];\n  defaultValue?: any[];\n  children: React.ReactElement[] | React.ReactElement;\n}\n\nconst RadioGroup: React.FunctionComponent<ButtonProps> = (props) => {\n  const [value, setValue] = useState(props.value || props.defaultValue || null);\n  const {\n    children,\n    onChange: onChangeProp,\n    value: propsValue,\n    ...rest\n  } = props;\n\n  /**\n   * checks if checked value is already in the state or not,\n   * if it, remove it else add it\n   *\n   * @param value\n   */\n  const onChange = (optionValue: any) => {\n    if (!('value' in props)) {\n      setValue(optionValue);\n    }\n\n    if (onChangeProp) {\n      onChangeProp(optionValue);\n    }\n  };\n\n  /**\n   * clones the children and add checked, onChange prop\n   */\n  const renderChildren = () => {\n    return React.Children.map(children, (child: React.ReactElement) => {\n      return React.cloneElement(child, {\n        onChange,\n        checked: value === child.props.value,\n      });\n    });\n  };\n\n  return <Div {...rest}>{renderChildren()}</Div>;\n};\n\nexport { RadioGroup };\n"]},"metadata":{},"sourceType":"script"}