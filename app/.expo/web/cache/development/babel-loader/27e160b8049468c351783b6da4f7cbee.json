{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useTheme = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _theme = require(\"./theme.service\");\n\nvar useTheme = function useTheme(initialTheme) {\n  var _useState = (0, _react.useState)((0, _theme.computeTheme)(initialTheme)),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      theme = _useState2[0],\n      setTheme = _useState2[1];\n\n  var setCurrentTheme = _react.default.useCallback(function (newTheme) {\n    setTheme((0, _theme.computeTheme)(newTheme));\n  }, []);\n\n  return {\n    theme: theme,\n    setTheme: setCurrentTheme\n  };\n};\n\nexports.useTheme = useTheme;","map":{"version":3,"sources":["theme.hook.ts"],"names":["useTheme","theme","setTheme","setCurrentTheme","React"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAGA,IAAA,MAAA,GAAA,OAAA,mBAAA;;AAGO,IAAMA,QAAQ,GAARA,SAAAA,QAAAA,CAAW,YAAXA,EAA2D;AAAA,MAAA,SAAA,GAC5C,CAAA,GAAA,MAAA,CAAA,QAAA,EAAS,CAAA,GAAA,MAAA,CAAA,YAAA,EADmC,YACnC,CAAT,CAD4C;AAAA,MAAA,UAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAC/DC,KAD+D,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MACxDC,QADwD,GAAA,UAAA,CAAA,CAAA,CAAA;;AAGtE,MAAMC,eAAe,GAAGC,MAAAA,CAAAA,OAAAA,CAAAA,WAAAA,CAAkB,UAAA,QAAA,EAAgC;AACxEF,IAAAA,QAAQ,CAAC,CAAA,GAAA,MAAA,CAAA,YAAA,EAATA,QAAS,CAAD,CAARA;AADsBE,GAAAA,EAAxB,EAAwBA,CAAxB;;AAIA,SAAO;AACLH,IAAAA,KAAK,EADA,KAAA;AAELC,IAAAA,QAAQ,EAFV;AAAO,GAAP;AAPK,CAAA","sourcesContent":["import React, { useState } from 'react';\n\nimport { ThemeType } from './type';\nimport { computeTheme } from './theme.service';\nimport { ThemeContextType } from './theme.context';\n\nexport const useTheme = (initialTheme?: ThemeType): ThemeContextType => {\n  const [theme, setTheme] = useState(computeTheme(initialTheme));\n\n  const setCurrentTheme = React.useCallback((newTheme?: ThemeType): void => {\n    setTheme(computeTheme(newTheme));\n  }, []);\n\n  return {\n    theme,\n    setTheme: setCurrentTheme,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}