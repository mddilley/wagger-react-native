{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Triangle = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _jsxFileName = \"/Users/pawankumar/Sites/react-native-magnus/src/ui/tooltip/triangle.component.tsx\";\n\nvar Triangle = function Triangle(props) {\n  var style = props.style,\n      invert = props.invert;\n  var computedStyle = style;\n\n  if (invert) {\n    computedStyle = _reactNative.StyleSheet.flatten([style, {\n      transform: [{\n        rotate: '180deg'\n      }]\n    }]);\n  }\n\n  return React.createElement(_reactNative.View, {\n    style: computedStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 10\n    }\n  });\n};\n\nexports.Triangle = Triangle;\nTriangle.defaultProps = {\n  invert: false\n};","map":{"version":3,"sources":["triangle.component.tsx"],"names":["Triangle","style","invert","props","computedStyle","StyleSheet","transform","rotate"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;AAKA,IAAMA,QAAgD,GAAhDA,SAAAA,QAAAA,CAAmD,KAAnDA,EAA8D;AAAA,MAC1DC,KAD0D,GACxCE,KADwC,CAAA,KAAA;AAAA,MACnDD,MADmD,GACxCC,KADwC,CAAA,MAAA;AAElE,MAAIC,aAAa,GAAjB,KAAA;;AAEA,MAAA,MAAA,EAAY;AACVA,IAAAA,aAAa,GAAGC,YAAAA,CAAAA,UAAAA,CAAAA,OAAAA,CAAmB,CAAA,KAAA,EAEjC;AACEC,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,MAAM,EAHxBH;AAGgB,OAAD;AADb,KAFiC,CAAnBC,CAAhBD;AAQF;;AAAA,SAAO,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAQ,IAAA,KAAK,EAAb,aAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAP;AAAO;AAAA,GAAA,CAAP;AAbF,CAAA;;;AAgBAJ,QAAQ,CAARA,YAAAA,GAAwB;AACtBE,EAAAA,MAAM,EADRF;AAAwB,CAAxBA","sourcesContent":["import * as React from 'react';\n\nimport { View as RNView, StyleSheet } from 'react-native';\nimport { TriangelProps } from './tooltip.type';\n\nconst Triangle: React.FunctionComponent<TriangelProps> = (props) => {\n  const { style, invert } = props;\n  let computedStyle = style;\n\n  if (invert) {\n    computedStyle = StyleSheet.flatten([\n      style,\n      {\n        transform: [{ rotate: '180deg' }],\n      },\n    ]);\n  }\n\n  return <RNView style={computedStyle} />;\n};\n\nTriangle.defaultProps = {\n  invert: false,\n};\n\nexport { Triangle };\n"]},"metadata":{},"sourceType":"script"}